# FoodyLog Release Pipeline
# Triggered on version tags (v1.0.0, v1.1.0, etc.)
# Builds and deploys production releases

name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  # Production environment configuration
  VITE_APP_VERSION: ${{ github.ref_name }}
  VITE_ENVIRONMENT: production
  
  # Production secrets
  VITE_CONVEX_URL: ${{ secrets.VITE_CONVEX_URL_PROD }}
  VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY_PROD }}
  VITE_GOOGLE_PLACES_API_KEY: ${{ secrets.VITE_GOOGLE_PLACES_API_KEY }}
  VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}

jobs:
  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to file for multiline output
          echo "$CHANGELOG" > changelog.txt
          echo "changelog-file=changelog.txt" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: FoodyLog ${{ github.ref_name }}
          body_path: changelog.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  # Build production web app
  build-production-web:
    name: Build Production Web
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build production web app
        run: bun run build
        
      - name: Create web app archive
        run: |
          cd dist
          tar -czf ../foodylog-web-${{ github.ref_name }}.tar.gz .
          cd ..
          
      - name: Upload web build to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: foodylog-web-${{ github.ref_name }}.tar.gz
          asset_name: foodylog-web-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying web app to production..."
          echo "This would deploy to your production server"
          echo "Add your actual deployment commands here"

  # Build production Android app
  build-production-android:
    name: Build Production Android
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-android-${{ hashFiles('**/bun.lockb', '**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-android-
            
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build web application
        run: bun run build
        
      - name: Sync Capacitor
        run: bun run cap:sync
        
      - name: Build signed Android APK
        run: |
          cd android
          # For production, you'd want to build a signed release APK
          # This requires setting up signing keys in GitHub secrets
          ./gradlew assembleRelease
          
      - name: Upload Android APK to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: android/app/build/outputs/apk/release/app-release.apk
          asset_name: foodylog-android-${{ github.ref_name }}.apk
          asset_content_type: application/vnd.android.package-archive

  # Build production iOS app
  build-production-ios:
    name: Build Production iOS
    runs-on: macos-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build web application
        run: bun run build
        
      - name: Sync Capacitor
        run: bun run cap:sync
        
      - name: Build iOS archive
        run: |
          cd ios
          # For production, you'd want to build a signed archive
          # This requires setting up certificates and provisioning profiles
          xcodebuild -workspace App/App.xcworkspace \
                     -scheme App \
                     -configuration Release \
                     -destination 'generic/platform=iOS' \
                     -archivePath App.xcarchive \
                     archive
                     
      - name: Create iOS IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
                     -archivePath App.xcarchive \
                     -exportPath . \
                     -exportOptionsPlist exportOptions.plist
                     
      - name: Upload iOS IPA to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ios/FoodyLog.ipa
          asset_name: foodylog-ios-${{ github.ref_name }}.ipa
          asset_content_type: application/octet-stream

  # Post-release notifications and cleanup
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [build-production-web, build-production-android, build-production-ios]
    if: always()
    
    steps:
      - name: Notify team of release
        run: |
          echo "üéâ FoodyLog ${{ github.ref_name }} has been released!"
          echo "üì± Android APK: Available in GitHub releases"
          echo "üçé iOS IPA: Available in GitHub releases"
          echo "üåê Web App: Deployed to production"
          
      - name: Update version in package.json
        if: success()
        run: |
          echo "Version ${{ github.ref_name }} released successfully"
          echo "Consider updating package.json version for next development cycle"