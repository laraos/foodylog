name: Test CI/CD Pipeline

# DISABLED: Workflow temporarily disabled
# This workflow tests the CI/CD pipeline setup
# Run manually to verify all components work correctly
on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - mobile-only

jobs:
  test-basic:
    name: Test Basic Pipeline
    runs-on: ubuntu-latest
    if: false  # DISABLED: Workflow temporarily disabled
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Test dependency installation
        run: |
          echo "Testing Bun dependency installation..."
          bun install --frozen-lockfile
          echo "✅ Dependencies installed successfully"
          
      - name: Test TypeScript compilation
        run: |
          echo "Testing TypeScript compilation..."
          bun run type-check
          echo "✅ TypeScript compilation successful"
          
      - name: Test linting
        run: |
          echo "Testing ESLint..."
          bun run lint
          echo "✅ Linting successful"
          
      - name: Test formatting check
        run: |
          echo "Testing Prettier formatting..."
          bun run format:check
          echo "✅ Formatting check successful"
          
      - name: Test unit tests
        run: |
          echo "Testing unit tests..."
          bun run test --run
          echo "✅ Unit tests successful"
          
      - name: Test build process
        run: |
          echo "Testing build process..."
          bun run build
          echo "✅ Build successful"
          
      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."
          ls -la dist/
          test -f dist/index.html || (echo "❌ index.html not found" && exit 1)
          test -d dist/assets || (echo "❌ assets directory not found" && exit 1)
          echo "✅ Build artifacts verified"

  test-mobile:
    name: Test Mobile Build Setup
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'mobile-only' || github.event.inputs.test_type == 'full'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build web app
        run: bun run build
        
      - name: Test Capacitor sync
        run: |
          echo "Testing Capacitor Android sync..."
          bunx cap sync android
          echo "✅ Capacitor sync successful"
          
      - name: Verify Android project
        run: |
          echo "Verifying Android project structure..."
          test -d android/app || (echo "❌ Android app directory not found" && exit 1)
          test -f android/app/build.gradle || (echo "❌ Android build.gradle not found" && exit 1)
          echo "✅ Android project structure verified"

  test-e2e-setup:
    name: Test E2E Testing Setup
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: bunx playwright install chromium
        
      - name: Build application
        run: bun run build
        
      - name: Test Playwright configuration
        run: |
          echo "Testing Playwright configuration..."
          bunx playwright test --list
          echo "✅ Playwright configuration valid"

  summary:
    name: Pipeline Test Summary
    runs-on: ubuntu-latest
    needs: [test-basic, test-mobile, test-e2e-setup]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## CI/CD Pipeline Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-basic.result }}" == "success" ]; then
            echo "✅ Basic Pipeline Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Basic Pipeline Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-mobile.result }}" == "success" ]; then
            echo "✅ Mobile Build Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-mobile.result }}" == "skipped" ]; then
            echo "⏭️ Mobile Build Tests: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Mobile Build Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-e2e-setup.result }}" == "success" ]; then
            echo "✅ E2E Testing Setup: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-e2e-setup.result }}" == "skipped" ]; then
            echo "⏭️ E2E Testing Setup: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Testing Setup: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure environment secrets in repository settings" >> $GITHUB_STEP_SUMMARY
          echo "2. Run branch protection setup script" >> $GITHUB_STEP_SUMMARY
          echo "3. Create a test pull request to verify full pipeline" >> $GITHUB_STEP_SUMMARY