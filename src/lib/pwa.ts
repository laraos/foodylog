/**
 * PWA Service Worker Registration and Update Management
 * 
 * Handles service worker registration for PWA functionality,
 * including automatic updates and user notifications. Implements
 * FoodyLog's offline-first strategy with smooth update experience.
 * 
 * Features:
 * - Automatic service worker registration
 * - Update detection and notification
 * - Toast notifications for updates
 * - Error handling for registration failures
 */

import { Workbox } from 'workbox-window'

let wb: Workbox | undefined

/**
 * Register service worker for PWA functionality
 * 
 * Registers the service worker generated by vite-plugin-pwa,
 * handles updates, and provides user feedback through toast
 * notifications. Implements autoUpdate strategy per requirements.
 */
export function registerSW() {
  if ('serviceWorker' in navigator) {
    wb = new Workbox('/sw.js')

    // Service worker installed for the first time
    wb.addEventListener('installed', (event) => {
      console.log('Service worker installed:', event)
      
      if (!event.isUpdate) {
        showToast('App is ready for offline use!', 'success')
      }
    })

    // New service worker is waiting to activate
    wb.addEventListener('waiting', (event) => {
      console.log('New service worker waiting:', event)
      showUpdateToast()
    })

    // Service worker activated and controlling the page
    wb.addEventListener('controlling', (event) => {
      console.log('Service worker controlling:', event)
      showToast('App updated successfully!', 'success')
      
      // Reload the page to ensure all resources are updated
      window.location.reload()
    })

    // Service worker registration failed
    wb.addEventListener('redundant', (event) => {
      console.warn('Service worker redundant:', event)
    })

    // Register the service worker
    wb.register()
      .then((registration) => {
        console.log('Service worker registered:', registration)
      })
      .catch((error) => {
        console.error('Service worker registration failed:', error)
        showToast('Failed to enable offline features', 'error')
      })
  } else {
    console.warn('Service workers are not supported in this browser')
  }
}

/**
 * Show update notification toast
 * 
 * Displays a toast notification when a new version is available,
 * with an option to update immediately or dismiss.
 */
function showUpdateToast() {
  const toast = createToast(
    'A new version is available!',
    'info',
    [
      {
        text: 'Update',
        action: () => {
          if (wb) {
            wb.messageSkipWaiting()
          }
        }
      },
      {
        text: 'Later',
        action: () => {
          // Just dismiss the toast
        }
      }
    ]
  )
  
  showToastElement(toast)
}

/**
 * Show a simple toast notification
 * 
 * @param message - Message to display
 * @param type - Toast type (success, error, info, warning)
 * @param duration - How long to show the toast (ms)
 */
function showToast(message: string, type: 'success' | 'error' | 'info' | 'warning' = 'info', duration = 5000) {
  const toast = createToast(message, type)
  showToastElement(toast, duration)
}

/**
 * Create a toast element
 * 
 * @param message - Toast message
 * @param type - Toast type
 * @param actions - Optional action buttons
 */
function createToast(
  message: string, 
  type: string, 
  actions?: Array<{ text: string; action: () => void }>
) {
  const toast = document.createElement('div')
  toast.className = `toast toast--${type}`
  
  const content = document.createElement('div')
  content.className = 'toast__content'
  
  const messageEl = document.createElement('span')
  messageEl.className = 'toast__message'
  messageEl.textContent = message
  content.appendChild(messageEl)
  
  if (actions) {
    const actionsEl = document.createElement('div')
    actionsEl.className = 'toast__actions'
    
    actions.forEach(action => {
      const button = document.createElement('button')
      button.className = 'toast__button'
      button.textContent = action.text
      button.onclick = () => {
        action.action()
        toast.remove()
      }
      actionsEl.appendChild(button)
    })
    
    content.appendChild(actionsEl)
  }
  
  toast.appendChild(content)
  return toast
}

/**
 * Show toast element on screen
 * 
 * @param toast - Toast element to show
 * @param duration - Auto-dismiss duration (0 = no auto-dismiss)
 */
function showToastElement(toast: HTMLElement, duration = 0) {
  // Create toast container if it doesn't exist
  let container = document.getElementById('toast-container')
  if (!container) {
    container = document.createElement('div')
    container.id = 'toast-container'
    container.className = 'toast-container'
    document.body.appendChild(container)
  }
  
  container.appendChild(toast)
  
  // Animate in
  requestAnimationFrame(() => {
    toast.classList.add('toast--show')
  })
  
  // Auto-dismiss if duration is set
  if (duration > 0) {
    setTimeout(() => {
      toast.classList.remove('toast--show')
      setTimeout(() => {
        toast.remove()
      }, 300) // Wait for animation
    }, duration)
  }
}

// Toast styles (injected once)
const toastStyles = `
.toast-container {
  position: fixed;
  top: var(--spacing-4);
  right: var(--spacing-4);
  z-index: var(--z-toast);
  display: flex;
  flex-direction: column;
  gap: var(--spacing-2);
  max-width: 400px;
}

.toast {
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  padding: var(--spacing-4);
  transform: translateX(100%);
  transition: transform 0.3s ease;
  opacity: 0;
}

.toast--show {
  transform: translateX(0);
  opacity: 1;
}

.toast--success {
  border-left: 4px solid var(--color-success);
}

.toast--error {
  border-left: 4px solid var(--color-error);
}

.toast--warning {
  border-left: 4px solid var(--color-warning);
}

.toast--info {
  border-left: 4px solid var(--color-primary);
}

.toast__content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: var(--spacing-3);
}

.toast__message {
  color: var(--color-text);
  font-size: var(--font-size-sm);
  line-height: 1.4;
}

.toast__actions {
  display: flex;
  gap: var(--spacing-2);
  flex-shrink: 0;
}

.toast__button {
  background: none;
  border: 1px solid var(--color-border);
  border-radius: var(--radius-md);
  padding: var(--spacing-1) var(--spacing-3);
  font-size: var(--font-size-xs);
  color: var(--color-text);
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.toast__button:hover {
  background-color: var(--color-border);
}

.toast__button:first-child {
  background-color: var(--color-primary);
  color: white;
  border-color: var(--color-primary);
}

.toast__button:first-child:hover {
  background-color: var(--color-primary-dark);
}

@media (max-width: 640px) {
  .toast-container {
    left: var(--spacing-4);
    right: var(--spacing-4);
    max-width: none;
  }
  
  .toast__content {
    flex-direction: column;
    align-items: stretch;
  }
  
  .toast__actions {
    justify-content: center;
  }
}
`

// Inject toast styles
if (typeof document !== 'undefined') {
  const styleElement = document.createElement('style')
  styleElement.textContent = toastStyles
  document.head.appendChild(styleElement)
}